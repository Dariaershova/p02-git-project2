*, *::after, *::before {
	box-sizing: border-box;
}


/*main class for setting flexboxes */

/*.box {

	display: -webkit-flex; /* For support in a series of Webkit browsers */
	/*display: -ms-flex; /* For support in IE 10 */
	/*display: flex; 

	-webkit-flex-wrap: wrap;
	-ms-flex-wrap: wrap;
	flex-wrap: wrap; 

	-webkit-flex-direction: row;
	-ms-flex-direction: row;
	flex-direction: row;

}*/


.centered-flex {

	-webkit-justify-content: center;
	-ms-justify-content: center;
	justify-content: center;

}

/*
.box-item-image {
	/*
		Given we are working with an image, in this case we have set a flex-basis value that is a pixel value to reflect the 'minimum' width of the image before the flexbox reflows and stacks the elements inside. Additionally, the use of a flex-grow value of 3 ensures that our image is 'heavier' (will take up more space) when available.
	*/
	/*-webkit-flex: 1 2 100px;
	-ms-flex: 1 2 100px;
	flex: 1 2 100px;
}*/


.box-item-text {
	/* 
		For the text, we want it to behave a bit differently, in this case setting an em value for its flex-basis. Using a 1 for the flex-grow value means it weighs less in comparison to our image, and will take less space when possible.
	*/
	-webkit-flex: 1 1 18em;
	-ms-flex: 1 1 18em;
	flex: 1 1 18em;

	padding-left: 2em;
}

/*daria*/
.two-column-box {

	/* 
		The statement below sets us into the flexbox display mode. Note support for flexbox still necessitates some vendor prefixes (see http://caniuse.com/#search=flex)
	*/
	display: -webkit-flex; /* For support in a series of Webkit browsers */
	display: -ms-flex; /* For support in IE 10 */
	display: flex; 

	/* 
		A flexbox will try to fit all elements in one line by default. The 'flex-wrap' property lets us wrap child elements that become too wide for their current row.
	*/
	-webkit-flex-wrap: wrap;
	-ms-flex-wrap: wrap;
	flex-wrap: wrap; 

	/* 
		To get our flexbox to change how elements are spanned across the remaining space, we can use the 'justify-content' property. In this case, we are specifying that we want the extra space to be balanced around our elements.
	*/
	-webkit-justify-content: flex-start;
	-ms-justify-content: flex-start;
	justify-content: flex-start;

	-webkit-flex-direction: row;
	-ms-flex-direction: row;
	flex-direction: row;

}

/*daria*/
.two-column-box-text {
	padding: 0 1.5em 1em 2em;
	-webkit-flex: 1 1 23em;
	-ms-flex: 1 1 23em;
	flex: 1 1 23em;
}


.two-column-box-image {
	-webkit-justify-content: space-around;
	-ms-justify-content:space-around;
	justify-content: space-around;

	-webkit-flex: 1 1 100px;
    -ms-flex: 1 1 100px;
    flex: 1 1 100px;
}


.main-category-grid {
	/* 
	The statement below sets us into the flexbox display mode. Note support for flexbox still necessitates some vendor prefixes (see http://caniuse.com/#search=flex)
	*/
	display: -webkit-flex; /* For support in a series of Webkit browsers */
	display: -ms-flex; /* For support in IE 10 */
	display: flex; 

	/* 
		A flexbox will try to fit all elements in one line by default. The 'flex-wrap' property lets us wrap child elements that become too wide for their current row.
	*/
	-webkit-flex-wrap: wrap;
	-ms-flex-wrap: wrap;
	flex-wrap: wrap; 

	-webkit-flex-direction: row;
	-ms-flex-direction: row;
	flex-direction: row;

	-webkit-justify-content: space-between;
	-ms-justify-content: space-between;
	justify-content: space-between;


}

.mini-flex {

	-webkit-flex: 1 1 150px;
    -ms-flex: 1 1 150px;
    flex: 1 1 150px;

}



.priority2
{

}

.priority3
{

}

.priority4
{

}



@media (min-width: 35em)  {



}



